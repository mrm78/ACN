swagger: "2.0"
info:
  description: This is All Available APIs
  version: 1.0.0
  title: ACN API

host: 172.17.3.118:5000
schemes:
 - http

tags:
- name: Account
  description: Account APIs
- name: Community
  description: Community APIs

paths:
  /account/register:
    post:
      tags:
        - Account
      summary: Register new user
      description: Register a new member to the site
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Account Register
        schema:
          type: object
          required:
          - username
          - email
          - name
          - password
          properties:
            username:
              type: string
              example: acn_account
            email:
              type: string
              format: email
              example: your@email.com
            name:
              type: string
              example: the name
            password:
              type: string
              example: the password
      responses:
        200-1:
          description: success
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
        200-2:
          description: failed(username)
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: not available username
        200-3:
          description: failed(email-availability)
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: not available email
        200-4:
          description: failed(email-validation)
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid email


  /account/verify_code:
    post:
      tags:
        - Account
      summary: Verify Email
      description: The given email is verified with emailed code
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Verify Code
        schema:
          type: object
          required:
          - username
          - verification_code
          properties:
            username:
              type: string
              example: <username> or <email>
            verification_code:
              type: string
              example: "1234"
      responses:
        200-1:
          description: this token should sent later as "Authorization" key in headers
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              token:
                type: string
                example: <user_token>
        200-2:
          description: failed(code)
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid code
        200-3:
          description: failed(username)
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid username


  /account/resend_verification_code:
    post:
      tags:
        - Account
      summary: Send Verification Again
      description: "The verification code can be sent again in case of time limit of 
                    verification code is reached"
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Verify Code
        schema:
          type: object
          required:
          - username
          properties:
            username:
              type: string
              example: acn_account
      responses:
        200-1:
          description: success
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
        200-2:
          description: failed.
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid username
    

  /account/login:
    post:
      tags:
        - Account
      summary: Login User
      description: The user can login here
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: Login
        schema:
          type: object
          required:
          - username
          - password
          properties:
            username:
              type: string
              example: <username> or <email>
            password:
              type: string
              example: the password
      responses:
        200-1:
          description: success
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              token:
                type: string
                example: <user_token>
        200-2:
          description: failed
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: not found

  /account/is_login:
    get:
      tags:
        - Account
      summary: check if user is login
      description: you can check user authentication here
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization or HTTP_AUTHORIZATION
        required: true
        type: string
        
        
      responses:
        200:
          description: success
          schema:
            type: object
            properties:
              status:
                type: string
                example: yes
        401-1:
          description: success
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Authentication credentials were not provided.
        401-2:
          description: success
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Invalid token.
      








  /community/create_community:
    post:
      tags:
        - Community
      summary: create a new community
      description: users cat create a new community
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: community info
        schema:
          type: object
          required:
          - title
          - description
          - tags
          properties:
            title:
              type: string
              example: call of duty
            description:
              type: string
              example: community of gamers ;)
            tags:
              type: list
              example: [1,2,3]
      responses:
        200-1:
          description: success
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
        200-2:
          description: failed -> empty title
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: empty title
        200-3:
          description: failed -> invalid tag id (there is an invalid tag id in tags)
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid tag id


  /community/create_event:
    post:
      tags:
        - Community
      summary: create a new event
      description: users cat create a new event
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: community info
        schema:
          type: object
          required:
          - title
          - description
          - community_id
          properties:
            title:
              type: string
              example: call of duty tricks
            description:
              type: string
              example: all tricks of call of duty
            community_id:
              type: integer
              example: 2
      responses:
        200-1:
          description: success
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
        200-2:
          description: failed -> empty title
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: empty title
        200-3:
          description: failed -> invalid community_id (
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid community id


  /community/all_community:
    get:
      tags:
        - Community
      summary: all communities
      description: return all communities
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: community info
      responses:
        200-1:
          description: success
          schema:
            type: array
            items:
              type: object
              example: {'id':1, 'title':'...', 'description':'...', 'tags':[1,3,5], 'creation_date':'2021-04-29T05:43:32.987417+04:30'}


  /community/events:
    get:
      tags:
        - Community
      summary: events of a community
      description: get id of a community and return events
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: community info
      responses:
        200-1:
          description: success
          schema:
            type: array
            items:
              type: object
              example: {'id':1, 'title':'...', 'description':'...', 'community':1, 'creator':5, 'creation_date':'2021-04-29T05:43:32.987417+04:30'}
        200-2:
          description: failed
          schema:
            type: object
            properties:
              status:
                type: string
                example: failed
              error:
                type: string
                example: invalid community id


  /community/tags:
    get:
      tags:
        - Community
      summary: get all community tags
      description: get all community tags
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: community info
      responses:
        200-1:
          description: success
          schema:
            type: array
            items:
              type: object
              example: {'id':1, 'name':'<tag>'}






definitions:
  event_res:
    type: object
    properties:
      event_id:
        type: string
        example: <event_id>
      title:
        type: string
        example: <event_title>
      description:
        type: string
        example: <event_description>
      admin_name:
        type: string
        example: <admin_name>
      admin_avatar_url:
        type: string
        example: <admin_avatar_url>
      city:
        type: string
        example: "<city>"
      participants:
        type: array
        example: [
              {
                id: <user1_id>,
                username: <user1_username>,
                name: <user1_name>,
                avatar_url: <user1_avatar_url>,
                rate: <user1_rate>| "Not Rated",
                hasRated: true,
                is_self: false,
              },
              {
                id: <user2_id>,
                username: <user2_username>,
                name: <user2_name>,
                avatar_url: <user2_avatar_url>,
                rate: <user2_rate> | "Not Rated",
                hasRated: true | false,
                is_self: true | false,
              },
              ...
              ]
      activity:
        type: object
        example: {
          id: <activity_id>,
          name: <activity_name>, 
          image_url: <activity_image_url>,
          color1: "rgb(x,x,x)",
          color2: "rgb(x,x,x,0.6)"
        }
      limit:
        type: string
        example: <limit_of_event>
      create_date:
        type: string
        example: <date_of_creation_date>
      hap_date:
        type: string
        example: <date_of_happening_date>
      pretty_hap_date:
        type: string
        example: ["Nov15", "football at 17:30"]
      time:
        type: string
        example: "17:30"
      location:
        type: string
      active:
        type: boolean
        example: true
      is_joined:
        type: boolean
        example: true
      is_admin:
        type: boolean
        example: true
      has_join_request:
        type: boolean
        example: true
      has_invite_request:
        type: boolean
        example: true
      comments:
        type: array
        example: [{
          'username': <user_username>,
          'text': <text>,
          'date': "2020-11-9"
        }, ...]
